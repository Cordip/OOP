// ./Task_2_2_1_1/app/src/main/resources/application.properties
# =========================================
# Настройки Пиццерии (префикс pizzeria)
# =========================================
# Время работы симуляции в мс
pizzeria.work-time-ms=6000000
# Вместимость очереди новых заказов
pizzeria.order-queue-capacity=15
# Вместимость склада готовых пицц
pizzeria.warehouse-capacity=10

# Путь к файлу лога старой системы (не используется активно)
pizzeria.log-file-path=logs/pizzeria_app.log
# Путь к файлу репозитория заказов (append-only JSON log)
pizzeria.repository-log-path=data/orders.log
# Множитель времени готовки за единицу "сложности" пиццы (мс)
pizzeria.ingredient-cooking-multiplier-ms=200
# Базовое среднее время готовки для расчета "мастерства" пекаря (мс)
pizzeria.baseline-average-cook-time-ms=1500

# Настройки Ротации Лога Репозитория (пример, если будут использоваться)
# pizzeria.repository-log-rotation.enabled=true
# pizzeria.repository-log-rotation.max-size-mb=10

# Настройки Пекарей (индексированные свойства)
pizzeria.bakers[0].id=1
pizzeria.bakers[0].cook-time-min-ms=1000
pizzeria.bakers[0].cook-time-max-ms=1800
pizzeria.bakers[1].id=2
pizzeria.bakers[1].cook-time-min-ms=1200
pizzeria.bakers[1].cook-time-max-ms=2200
pizzeria.bakers[2].id=3
pizzeria.bakers[2].cook-time-min-ms=900
pizzeria.bakers[2].cook-time-max-ms=1500

# Настройки Курьеров (индексированные свойства)
pizzeria.couriers[0].id=1
pizzeria.couriers[0].capacity=2
pizzeria.couriers[0].delivery-time-min-ms=2000
pizzeria.couriers[0].delivery-time-max-ms=3500
pizzeria.couriers[1].id=2
pizzeria.couriers[1].capacity=3
pizzeria.couriers[1].delivery-time-min-ms=2500
pizzeria.couriers[1].delivery-time-max-ms=4500

# =========================================
# Стандартные настройки Spring Boot
# =========================================
server.port=8080

# Настройки логирования Spring Boot (SLF4j/Logback)
logging.level.root=WARN
logging.level.org.example.pizzeria=INFO
logging.level.org.springframework.web=INFO
logging.level.io.micrometer=INFO
# %X{orderId:-} добавляет orderId из MDC в лог, если он есть
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%15.15t] %-5level %-40.40logger{39} [%8.8X{orderId:-}] : %msg%n
# logging.file.name=logs/pizzeria-spring.log # Для записи логов в файл
# logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%15.15t] %-5level %-40.40logger{39} [%8.8X{orderId:-}] : %msg%n

# =========================================
# Настройки Spring Boot Actuator
# =========================================
management.endpoints.web.exposure.include=health,info,metrics,loggers,shutdown
# Разрешает graceful shutdown через /actuator/shutdown
# management.endpoint.shutdown.enabled=true
# или always/never
management.endpoint.health.show-details=WHEN_AUTHORIZED 
# management.endpoint.metrics.enabled=true
management.metrics.tags.application=${spring.application.name:pizzeria-app} # Общий тег для всех метрик
# Включает свойства из окружения в /actuator/info
management.info.env.enabled=true 
spring.application.name=pizzeria-simulator