/*
 * This source file was generated by the Gradle 'init' task
 */
package sorter;

import java.util.Arrays;
import java.util.Random;

import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;

import sorter.HeapSort;

import static org.junit.jupiter.api.Assertions.*;

class HeapSortTest {

    @Test void simpleArray() {
        int [] simple_array = {5, 4, 3, 2, 1};
        int [] clone_simple_array = simple_array.clone();
        HeapSort.sort(simple_array);
        Arrays.sort(clone_simple_array);
        assertArrayEquals(clone_simple_array, simple_array, "app can sort simple array");
    }

    @Test void bigReversedArray() {
        int right = 100000;
        int cnt = 0;
        int [] arr = new int[right*2+100];
        for (int i = right; i > right; --i) {
            arr[cnt++] = i;
        }
        int [] clone_array = arr.clone();
        HeapSort.sort(arr);
        Arrays.sort(clone_array);
        assertArrayEquals(clone_array, arr, "app can sort big array");
    }

    @Test void veryBigReversedArray() {
        int right = 10000000;
        int cnt = 0;
        int [] arr = new int[right*2+100];
        for (int i = right; i > right; --i) {
            arr[cnt++] = i;
        }
        int [] clone_array = arr.clone();
        HeapSort.sort(arr);
        Arrays.sort(clone_array);
        assertArrayEquals(clone_array, arr, "app can sort very big array");
    }

    @Test void veryBigAlreadySortedArray() {
        int right = 10000000;
        int cnt = 0;
        int [] arr = new int[right*2+100];
        for (int i = -right; i < right; ++i) {
            arr[cnt++] = i;
        }
        int [] clone_array = arr.clone();
        HeapSort.sort(arr);
        Arrays.sort(clone_array);
        assertArrayEquals(clone_array, arr, "app can sort very big already sorted array");
    }

    @Test void emptyArray() {
        int [] arr = new int[0];
        HeapSort.sort(arr);
        assertArrayEquals(new int [0], arr, "app can sort empty array");
    }

    @Test void oneElementArray() {
        int [] arr = {666};
        HeapSort.sort(arr);
        assertArrayEquals(new int [] {666}, arr, "app can sort one element array");
    }

    @RepeatedTest(100) void randomMediumArrays() {
        Random rnd = new Random();

        int length = rnd.nextInt(10000);

        int [] arr = new int[length];
        
        for (int i = 0; i < length; ++i) {
            arr[i] = rnd.nextInt(10000) - 5000;
        }

        int [] clone_arr = arr.clone();
        HeapSort.sort(arr);
        Arrays.sort(clone_arr);
        assertArrayEquals(clone_arr, arr, "app can sort random medium arrays");
        

    }

    @RepeatedTest(1000) void randomSmallArrays() {
        Random rnd = new Random();

        int length = rnd.nextInt(100);

        int [] arr = new int[length];
        
        for (int i = 0; i < length; ++i) {
            arr[i] = rnd.nextInt(1000000) - 5000000;
        }

        int [] clone_arr = arr.clone();
        HeapSort.sort(arr);
        Arrays.sort(clone_arr);
        assertArrayEquals(clone_arr, arr, "app can sort random small arrays");
        

    }

}
